//! Rust binding for rpmlib: the RPM Package Manager library
//!
//! This crate contains idiomatic Rust bindings which aim to expose a safe
//! API to rpmlib. The low-level unsafe bindings are located in the
//! [rpmlib-sys] crate, which is automatically generated by bindgen.
//!
//! Make sure to call `rpmlib::read_config` to load rpmrc configuration.
//!
//! See the `rpmlib::db::Database` type for examples of how to interact with
//! the RPM database.
//!
//! [rpmlib-sys]: https://rpmlib.rs/rpmlib-sys/

#![crate_name = "rpmlib"]
#![crate_type = "rlib"]
#![deny(warnings, missing_docs, trivial_casts, trivial_numeric_casts)]
#![deny(unused_import_braces, unused_qualifications)]
#![doc(html_root_url = "https://rpmlib.rs/rpmlib/")]

extern crate byteorder;
#[macro_use]
extern crate failure;
#[macro_use]
extern crate lazy_static;
extern crate libc;
extern crate rpmlib_sys;

/// RPM configuration (i.e. rpmrc)
pub mod config;

/// RPM database access
pub mod db;

/// RPM package headers
pub mod header;

/// Iterators over the RPM database
pub mod iterator;

/// RPM's global state
mod global_state;

/// Macros are RPM's configuration system
pub mod macro_context;

/// Tag data: header values
pub mod td;

/// Transaction Sets: rpmlib transactions (needed for practically everything)
pub mod ts;

/// Tags for header entries and indexes
pub mod tag;

pub use header::Header;
pub(crate) use global_state::GlobalState;
pub use iterator::MatchIterator;
pub use macro_context::MacroContext;
pub use td::TagData;
pub use tag::Tag;
