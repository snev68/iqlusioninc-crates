//! Rust binding for rpmlib: the RPM Package Manager library
//!
//! This crate contains idiomatic Rust bindings which aim to expose a safe
//! API to rpmlib. The low-level unsafe bindings are located in the
//! [rpmlib-sys] crate, which is automatically generated by bindgen.
//!
//! Make sure to call `rpmlib::read_config` to load rpmrc configuration.
//!
//! See the `rpmlib::db::Database` type for examples of how to interact with
//! the RPM database.
//!
//! [rpmlib-sys]: https://github.com/iqlusion-io/crates/tree/master/rpmlib-sys

#![crate_name = "rpmlib"]
#![crate_type = "rlib"]
#![deny(warnings, missing_docs, trivial_casts, trivial_numeric_casts)]
#![deny(unused_import_braces, unused_qualifications)]

extern crate byteorder;
#[macro_use]
extern crate failure;
#[macro_use]
extern crate lazy_static;
extern crate libc;
extern crate rpmlib_sys;
pub extern crate streaming_iterator;

/// RPM database access
pub mod db;

/// RPM package headers
pub mod header;

/// Wrapper for rpmlib which ensures single-threaded access
mod ffi;

/// Macros are RPM's configuration system
pub mod macro_context;

/// Tag data: header values
pub mod td;

/// Transaction Sets: rpmlib transactions (needed for practically everything)
pub mod ts;

/// Tags for header entries and indexes
pub mod tag;

pub use db::Database;
pub use header::Header;
pub use macro_context::MacroContext;
pub use streaming_iterator::StreamingIterator;
pub use td::TagData;
pub use ts::TransactionSet as Txn;
pub use tag::Tag;

use failure::Error;
use std::ffi::CString;
use std::os::unix::ffi::OsStrExt;
use std::path::Path;
use std::ptr;

use ffi::FFI;

/// Read RPM configuration (a.k.a. rpmrc)
///
/// If `None` is passed, the default configuration will be used
///
/// Configuration is global to the process
pub fn read_config(config_file: Option<&Path>) -> Result<(), Error> {
    let mut ffi = FFI::try_lock()?;
    let rc;

    if let Some(path) = config_file {
        let path_cstr = CString::new(path.as_os_str().as_bytes())
            .map_err(|e| format_err!("invalid path: {} ({})", path.display(), e))?;

        rc = unsafe { ffi.rpmReadConfigFiles(path_cstr.as_ptr(), ptr::null()) };
    } else {
        rc = unsafe { ffi.rpmReadConfigFiles(ptr::null(), ptr::null()) };
    }

    if rc != 0 {
        match config_file {
            Some(path) => bail!("error reading RPM config from: {}", path.display()),
            None => bail!("error reading RPM config from default location"),
        }
    }

    Ok(())
}
